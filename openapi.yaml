# This file was autogenerated, please do not modify.
components:
  schemas:
    AcademicTitle:
      description: Academic title
      enum:
      - Dr.
      - Prof.
      title: AcademicTitle
      type: string
    User:
      description: User
      properties:
        email:
          description: Preferred e-mail address of the user
          example: user@home.org
          format: email
          title: E-Mail
          type: string
        id:
          description: Internally used ID
          title: ID
          type: string
        ls_id:
          description: Life Science ID
          example: user@lifescience-ri.eu
          format: email
          title: LS ID
          type: string
        name:
          description: Full name of the user
          example: Rosalind Franklin
          title: Name
          type: string
        registration_date:
          format: date-time
          title: Resitration date
          type: string
        registration_reason:
          title: Reason for registration
          type: string
        research_topics:
          title: Research topic(s)
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: Registration status of the user
          title: Status
        title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitle'
          description: Academic title of the user
          title: Academic title
      required:
      - ls_id
      - status
      - name
      - email
      - registration_date
      - id
      title: User
      type: object
    UserData:
      description: User data that is fixed
      properties:
        email:
          description: Preferred e-mail address of the user
          example: user@home.org
          format: email
          title: E-Mail
          type: string
        ls_id:
          description: Life Science ID
          example: user@lifescience-ri.eu
          format: email
          title: LS ID
          type: string
        name:
          description: Full name of the user
          example: Rosalind Franklin
          title: Name
          type: string
        registration_date:
          format: date-time
          title: Resitration date
          type: string
        registration_reason:
          title: Reason for registration
          type: string
        research_topics:
          title: Research topic(s)
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: Registration status of the user
          title: Status
        title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitle'
          description: Academic title of the user
          title: Academic title
      required:
      - ls_id
      - status
      - name
      - email
      - registration_date
      title: UserData
      type: object
    UserModifiableData:
      description: User data that is modifyable
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: Registration status of the user
          title: Status
        title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitle'
          description: Academic title of the user
          title: Academic title
      title: UserModifiableData
      type: object
    UserStatus:
      description: User status enum
      enum:
      - registered
      - activated
      - inactivated
      - deleted
      title: UserStatus
      type: string
info:
  contact:
    email: helpdesk@ghga.de
    name: GHGA
  description: REST API for managing the GHGA user registry
  license:
    name: Apache 2.0
  title: User Registry API
  version: 0.1.0
openapi: 3.0.2
paths:
  /:
    get:
      description: Index of the User Management Service.
      operationId: index
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Index
  /users:
    post:
      description: Endpoint used to register a new user. May only be performed by
        the users themselves. Data delivered by the OIDC provider may not be altered.
      operationId: post_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User was successfully registered.
        '400':
          description: User cannot be registered.
        '409':
          description: User was already registered.
        '422':
          description: Validation error in submitted user data.
      summary: Register a user
      tags:
      - users
  /users/{id}:
    get:
      description: Endpoint used to get the user data for a specified user. Can only
        be performed by a data steward or the same user.
      operationId: get_user
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Internal ID or LS ID
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Requested user has been found.
        '401':
          description: Not authorized to get user data.
        '404':
          description: The user was not found.
        '422':
          description: Validation error in submitted user identification.
      summary: Get user data
      tags:
      - users
    patch:
      description: Endpoint used to modify the user data for a specified user. Can
        only be performed by a data steward or the same user.
      operationId: patch_user
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Internal ID
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModifiableData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '204':
          description: User data was successfully saved.
        '404':
          description: The user was not found.
        '422':
          description: Validation error in submitted user data.
      summary: Modify user data
      tags:
      - users
tags:
- description: User data
  name: users
