components:
  schemas:
    AcademicTitle:
      description: Academic title
      enum:
      - Dr.
      - Prof.
      title: AcademicTitle
      type: string
    AuthorityLevel:
      description: Type of asserting authority
      enum:
      - self
      - peer
      - system
      - so
      - dac
      title: AuthorityLevel
      type: string
    Claim:
      additionalProperties: false
      description: A claim about a user with a claim ID
      properties:
        asserted_by:
          allOf:
          - $ref: '#/components/schemas/AuthorityLevel'
          example: so
          title: Authority level
        assertion_date:
          example: '2022-11-30T12:00:00Z'
          format: date-time
          title: Assertion date
          type: string
        conditions:
          items:
            items:
              $ref: '#/components/schemas/Condition'
            type: array
          title: Set of conditions
          type: array
        creation_by:
          title: Who created this claim (user ID)
          type: string
        creation_date:
          format: date-time
          title: Date of creation of this claim
          type: string
        id:
          description: Internally used ID of the claim
          title: ID
          type: string
        revocation_by:
          title: Who revoked this claim (user ID)
          type: string
        revocation_date:
          format: date-time
          title: If revoked, date of revocation
          type: string
        source:
          example: https://home.org
          format: uri
          maxLength: 2083
          minLength: 1
          title: Asserting organization
          type: string
        sub_source:
          example: https://dac.home.org
          format: uri
          maxLength: 2083
          minLength: 1
          title: Asserting sub-organization
          type: string
        user_id:
          description: Internally used ID of the user
          title: ID
          type: string
        valid_from:
          example: '2023-01-01T00:00:00Z'
          format: date-time
          title: Start date of validity
          type: string
        valid_until:
          example: '2023-12-31T23:59:59Z'
          format: date-time
          title: End date of validity
          type: string
        visa_type:
          example: AffiliationAndRole
          title: Visa type
          type: string
        visa_value:
          anyOf:
          - format: email
            type: string
          - format: uri
            maxLength: 2083
            minLength: 1
            type: string
          - items:
              $ref: '#/components/schemas/Identity'
            type: array
          example: faculty@home.org
          title: Scope of the claim depending of the visa type
      required:
      - visa_type
      - visa_value
      - assertion_date
      - valid_from
      - valid_until
      - source
      - user_id
      - creation_date
      - creation_by
      - id
      title: Claim
      type: object
    ClaimCreation:
      additionalProperties: false
      description: A claim made about a user with a user ID
      properties:
        asserted_by:
          allOf:
          - $ref: '#/components/schemas/AuthorityLevel'
          example: so
          title: Authority level
        assertion_date:
          example: '2022-11-30T12:00:00Z'
          format: date-time
          title: Assertion date
          type: string
        conditions:
          items:
            items:
              $ref: '#/components/schemas/Condition'
            type: array
          title: Set of conditions
          type: array
        source:
          example: https://home.org
          format: uri
          maxLength: 2083
          minLength: 1
          title: Asserting organization
          type: string
        sub_source:
          example: https://dac.home.org
          format: uri
          maxLength: 2083
          minLength: 1
          title: Asserting sub-organization
          type: string
        valid_from:
          example: '2023-01-01T00:00:00Z'
          format: date-time
          title: Start date of validity
          type: string
        valid_until:
          example: '2023-12-31T23:59:59Z'
          format: date-time
          title: End date of validity
          type: string
        visa_type:
          example: AffiliationAndRole
          title: Visa type
          type: string
        visa_value:
          anyOf:
          - format: email
            type: string
          - format: uri
            maxLength: 2083
            minLength: 1
            type: string
          - items:
              $ref: '#/components/schemas/Identity'
            type: array
          example: faculty@home.org
          title: Scope of the claim depending of the visa type
      required:
      - visa_type
      - visa_value
      - assertion_date
      - valid_from
      - valid_until
      - source
      title: ClaimCreation
      type: object
    ClaimMatch:
      additionalProperties: false
      description: A pair of a claim name and a match value with type
      properties:
        claim:
          $ref: '#/components/schemas/MatchClaim'
        match_type:
          $ref: '#/components/schemas/MatchType'
        match_value:
          title: Match Value
          type: string
      required:
      - claim
      - match_type
      - match_value
      title: ClaimMatch
      type: object
    ClaimUpdate:
      additionalProperties: false
      description: A set of attributes that shall be updated in a claim.
      properties:
        revocation_date:
          format: date-time
          title: Date of revocation
          type: string
      required:
      - revocation_date
      title: ClaimUpdate
      type: object
    Condition:
      additionalProperties: false
      description: A single condition to check a type and a set of claims
      properties:
        matches:
          items:
            $ref: '#/components/schemas/ClaimMatch'
          title: Matches
          type: array
        type:
          $ref: '#/components/schemas/VisaType'
      required:
      - type
      - matches
      title: Condition
      type: object
    Identity:
      additionalProperties: false
      description: A user identity based on an iss/sub pair
      properties:
        iss:
          description: OpenID Issuer
          format: uri
          maxLength: 2083
          minLength: 1
          title: Issuer
          type: string
        sub:
          description: OpenID Subject
          title: Subject
          type: string
      required:
      - iss
      - sub
      title: Identity
      type: object
    MatchClaim:
      description: Possible visa claim names for conditions
      enum:
      - by
      - source
      - value
      title: MatchClaim
      type: string
    MatchType:
      description: Type of matching a claim value
      enum:
      - const
      - pattern
      - split_pattern
      title: MatchType
      type: string
    StatusChange:
      additionalProperties: false
      description: Details of a status change
      properties:
        by:
          description: ID of the user who changed the status
          title: Status changed by
          type: string
        change_date:
          format: date-time
          title: Date of last change
          type: string
        context:
          title: Status change context
          type: string
        previous:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          title: Previous user status
      title: StatusChange
      type: object
    User:
      additionalProperties: false
      description: Complete user model with ID
      properties:
        access_requests:
          default: []
          description: List of IDs of all data access requests created by the user
          items:
            type: string
          title: Access requests
          type: array
        email:
          description: Preferred e-mail address of the user
          example: user@home.org
          format: email
          title: E-Mail
          type: string
        id:
          description: Internally used ID
          title: ID
          type: string
        ls_id:
          description: Life Science ID
          example: user@lifescience-ri.eu
          format: email
          title: LS ID
          type: string
        name:
          description: Full name of the user
          example: Rosalind Franklin
          title: Name
          type: string
        registration_date:
          format: date-time
          title: Registration date
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: Registration status of the user
          title: Status
        status_change:
          $ref: '#/components/schemas/StatusChange'
        submissions:
          default: []
          description: List of IDs of all submissions created by the user
          items:
            type: string
          title: Submissions
          type: array
        title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitle'
          description: Academic title of the user
          title: Academic title
      required:
      - registration_date
      - ls_id
      - name
      - email
      - status
      - id
      title: User
      type: object
    UserCreatableData:
      additionalProperties: false
      description: User data
      properties:
        email:
          description: Preferred e-mail address of the user
          example: user@home.org
          format: email
          title: E-Mail
          type: string
        ls_id:
          description: Life Science ID
          example: user@lifescience-ri.eu
          format: email
          title: LS ID
          type: string
        name:
          description: Full name of the user
          example: Rosalind Franklin
          title: Name
          type: string
        title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitle'
          description: Academic title of the user
          title: Academic title
      required:
      - ls_id
      - name
      - email
      title: UserCreatableData
      type: object
    UserModifiableData:
      additionalProperties: false
      description: User data that can be modified
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: Registration status of the user
          title: Status
        title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitle'
          description: Academic title of the user
          title: Academic title
      title: UserModifiableData
      type: object
    UserStatus:
      description: User status enum
      enum:
      - registered
      - activated
      - inactivated
      - deleted
      title: UserStatus
      type: string
    VisaType:
      description: Type of a visa
      enum:
      - AffiliationAndRole
      - AcceptedTermsAndPolicies
      - ResearcherStatus
      - ControlledAccessGrants
      - LinkedIdentities
      - https://www.ghga.de/GA4GH/VisaTypes/Role/v1.0
      title: VisaType
      type: string
  securitySchemes:
    HTTPBearer:
      scheme: bearer
      type: http
info:
  contact:
    email: helpdesk@ghga.de
    name: GHGA
  description: REST API for managing the GHGA users and user claims
  license:
    name: Apache 2.0
  title: User Management API
  version: 0.2.2
openapi: 3.0.2
paths:
  /health:
    get:
      description: Used to check that this service is alive
      operationId: health_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: health
      tags:
      - health
  /users:
    post:
      description: Endpoint used to register a new user. May only be performed by
        the users themselves. Data delivered by the OIDC provider may not be altered.
      operationId: post_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatableData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User was successfully registered.
        '400':
          description: User cannot be registered.
        '403':
          description: Not authorized to register user.
        '409':
          description: User was already registered.
        '422':
          description: Validation error in submitted user data.
      security:
      - HTTPBearer: []
      summary: Register a user
      tags:
      - users
  /users/{id}:
    delete:
      description: Endpoint used to delete a user. Can only be performed by a data
        steward.
      operationId: delete_user
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Internal ID
          type: string
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '204':
          description: User data was successfully deleted.
        '403':
          description: Not authorized to delete this user.
        '404':
          description: The user was not found.
        '422':
          description: Validation error in submitted user identification.
      security:
      - HTTPBearer: []
      summary: Delete user
      tags:
      - users
    get:
      description: Endpoint used to get the user data for a specified user. Can only
        be performed by a data steward or the same user.
      operationId: get_user
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Internal ID or LS ID
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Requested user has been found.
        '401':
          description: Not authorized to get user data.
        '403':
          description: Not authorized to request user.
        '404':
          description: The user was not found.
        '422':
          description: Validation error in submitted user identification.
      security:
      - HTTPBearer: []
      summary: Get user data
      tags:
      - users
    patch:
      description: Endpoint used to modify the user data for a specified user. Can
        only be performed by a data steward or the same user.
      operationId: patch_user
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Internal ID
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModifiableData'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '204':
          description: User data was successfully saved.
        '403':
          description: Not authorized to make this modification.
        '404':
          description: The user was not found.
        '422':
          description: Validation error in submitted user data.
      security:
      - HTTPBearer: []
      summary: Modify user data
      tags:
      - users
  /users/{user_id}/claims:
    get:
      description: Endpoint used to get all claims for a specified user.
      operationId: get_claims
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: Internal ID of the user
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Claim'
                title: Response 200 Get Claims
                type: array
          description: User claims have been retrieved.
        '401':
          description: Not authorized to get user claims.
        '403':
          description: Not authorized to request claims.
        '404':
          description: The user was not found.
        '422':
          description: Validation error in submitted user ID.
      security:
      - HTTPBearer: []
      summary: Get all claims for a given user
      tags:
      - claims
    post:
      description: Endpoint used to store a new claim about a user.
      operationId: post_claim
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: Internal ID of the user
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimCreation'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claim'
          description: Claim was successfully stored.
        '400':
          description: Claim cannot be stored.
        '403':
          description: Not authorized to create claims.
        '404':
          description: The user was not found.
        '409':
          description: Claim was already stored.
        '422':
          description: Validation error in submitted ID or claims data.
      security:
      - HTTPBearer: []
      summary: Store a user claim
      tags:
      - claims
  /users/{user_id}/claims/{claim_id}:
    delete:
      description: Endpoint used to delete an existing user claim.
      operationId: delete_claim
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: Internal user ID
          type: string
      - in: path
        name: claim_id
        required: true
        schema:
          title: Internal claim ID
          type: string
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '204':
          description: User claim was successfully deleted.
        '403':
          description: Not authorized to delete claims.
        '404':
          description: The user claim was not found.
        '422':
          description: Validation error in submitted user or claim ID.
      security:
      - HTTPBearer: []
      summary: Delete an existing user claim
      tags:
      - claims
    patch:
      description: Endpoint used to revoke a claim for a specified user.
      operationId: patch_claim
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: Internal user ID
          type: string
      - in: path
        name: claim_id
        required: true
        schema:
          title: Internal claim ID
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimUpdate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '204':
          description: User claim was successfully saved.
        '403':
          description: Not authorized to modify claims.
        '404':
          description: The user claim was not found.
        '422':
          description: Validation error in submitted user data.
      security:
      - HTTPBearer: []
      summary: Revoke an existing user claim
      tags:
      - claims
tags:
- description: User data
  name: users
- description: User claims
  name: claims
